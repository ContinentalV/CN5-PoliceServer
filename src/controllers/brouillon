// Utiliser express-validator ou une librairie similaire pour valider les données d'entrée
import { body, validationResult } from 'express-validator';

const validateMemberCreation = [
  body('discordId').isString(),
  body('username').isString(),
  // Ajoutez d'autres validations selon le besoin
  (req: Request, res: Response, next: NextFunction) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    next();
  },
];

router.post('/members', validateMemberCreation, async (req: Request, res: Response, next: NextFunction) => {
  // Votre logique ici
});




const getSalaryForUser = async (discordId: string): Promise<number> => {
    const connection: PoolConnection = await pool.getConnection();
    let totalSalary = 0;

    try {
        // Appel de la procédure stockée CalculateSalary
        await connection.query('CALL CalculateSalary(?, @totalSalary)', [discordId]);

        // Récupération du salaire calculé
        const [salaryRows] = await connection.query('SELECT @totalSalary AS totalSalary');
        if (salaryRows.length > 0) {
            totalSalary = salaryRows[0].totalSalary;
        }
    } catch (error) {
        console.error('Error fetching user salary:', error);
        throw error; // Ou gérer l'erreur comme vous le souhaitez
    } finally {
        connection.release();
    }

    return totalSalary;
};
